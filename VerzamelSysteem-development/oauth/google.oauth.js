const { OAuth2Client } = require('google-auth-library');
const { stringify } = require('querystring');
const url = require('url');
const EventEmitter = require('events');
const RedirectServer = require('./redirect-server');

class GoogleOAuth extends EventEmitter {
  /**
   * @private
   * @type {string}
   */
  successRedirectURL = 'https://127.0.0.1/';

  /**
   * @private
   * @type {number}
   */
  successRedirectPort = 42813;

  /**
   * @private
   * @type {string}
   */
  clientId = '955658714327-7rr7rb5cm7o3kj4oot2m00ibum0jesr9.apps.googleusercontent.com';

  /**
   * @private
   * @type {string}
   */
  clientSecret = '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';

  /**
   * @private
   * @type {string[]}
   */
  scopes = ['profile', 'email', 'https://www.googleapis.com/auth/adwords'];

  /**
   * @private
   * @type {string[]}
   */
  prompt;

  /**
   * @private
   * @type {import('google-auth-library').OAuth2Client}
   */
  oauth2Client;

  /**
   * @private
   * @type {boolean}
   */
  credentialsReceived;

  /**
   * @private
   * @type {import('electron').BrowserWindow}
   */
  oAuthWindow;

  /**
   * Create a new instance of GoogleOAuth
   * @param {Electron} electron
   * @param {import('electron').BrowserWindow} win
   */
  constructor(electron, win) {
    super();
    this.electron = electron;
    this.win = win;
    this.prompt = [];
    this.initOAuth2Client();
  }

  /**
   * @private
   */
  initOAuth2Client() {
    this.oauth2Client = new OAuth2Client(
      this.clientId,
      this.clientSecret,
      `http://127.0.0.1:${this.successRedirectPort}/callback`,
    );
    this.oauth2Client.on('tokens', (tokens) => {
      this.emit('tokens', tokens);
    });
  }

  /**
   * Returns authUrl generated by googleapis
   * @param {boolean} forceAddSession
   * @returns {string}
   */
  generateAuthUrl(forceAddSession = false) {
    const opts = {
      access_type: 'offline', // 'online' (default) or 'offline' (gets refresh_token)
      scope: this.scopes,
      redirect_uri: `http://127.0.0.1:${this.successRedirectPort}/callback`,
    };
    if (this.prompt.length) {
      opts.prompt = this.prompt.join(' ');
    }
    let authUrl = this.oauth2Client.generateAuthUrl(opts);
    if (forceAddSession) {
      const qs = stringify({ continue: authUrl });
      authUrl = `https://accounts.google.com/AddSession?${qs}`;
    }
    return authUrl;
  }

  /**
   * Get authorization code for underlying authUrl
   * @param {boolean} forceAddSession
   * @returns {Promise<string>}
   */
  async getAuthorizationCode(forceAddSession = false) {
    const authUrl = this.generateAuthUrl(forceAddSession);
    await this.createServer();
    try {
      await this.initOAuthWindow(authUrl);
      const reachedCallbackURL = await this.server.waitForRedirect();
      // waitForRedirection will close the server
      const parsed = url.parse(reachedCallbackURL, true);
      if (parsed.query.error || !parsed.query.code) return null;
      this.credentialsReceived = true;
      return parsed.query.code;
    } catch (err) {
      return null;
    } finally {
      if (this.oAuthWindow) {
        this.oAuthWindow.close();
        this.oAuthWindow = null;
      }
      this.server = null;
    }
  }

  /**
   * @private
   * @return {Promise<void>}
   */
  async createServer() {
    if (this.server) {
      // if a server is already running, we close it so that we free the port
      // and restart the process
      await this.server.close();
      this.server = null;
    }
    this.server = new RedirectServer({
      port: this.successRedirectPort,
      callbackPath: '/callback',
      successRedirectURL: this.successRedirectURL,
    });
  }

  /**
   * @private
   * @param {string} urlParam
   * @return {Promise<void>}
   */
  async initOAuthWindow(urlParam) {
    this.oAuthWindow = new this.electron.BrowserWindow({
      parent: this.win,
      width: 500,
      height: 500,
    });
    this.oAuthWindow.setAlwaysOnTop(true, 'modal-panel');
    this.oAuthWindow.show();
    await this.oAuthWindow.loadURL(urlParam);
  }

  /**
   * @public
   * @param {boolean} forceAddSession
   * @return {Promise<string>}
   */
  async getCredentials(forceAddSession = false) {
    const authorizationCode = await this.getAuthorizationCode(forceAddSession);
    if (!authorizationCode) return null;
    const response = await this.oauth2Client.getToken(authorizationCode);
    this.oauth2Client.setCredentials(response.tokens);
    return response?.tokens?.refresh_token || null;
  }
}

module.exports = GoogleOAuth;
